
1. Описание на решението на задача 1 поместена в 61701-download.sh
    - дефинирам променливи, в които ще съхраняам информацията въведена от потребителя
    - дефинирам функция read_input, която чете подадените аргументи от
      потребителя и ги съхранява в споменатите по-горе променливи. Функцията валидира
      дали са подадени входните параметри и изписва съобщение за грешка, ако това е така
    - дефинирам функция download_competition, която изтегля файловете от дадено състезание.
      В повече детайли тя проверява дали е инсталиран необходимия софтуер за изтегляне на
      файлове, в случая wget и изписва подходящо съобщение на потребителя, ако това не е изпълнено.
      Източник: https://stackoverflow.com/questions/592620/check-if-a-program-exists-from-a-bash-script

      След това създава желаната директория, подадена от потребителя като място,
      където да бъдат свалени файловете и изтегля с помощта на wget страницата на
      подаденото състезание. Прави се проверка за наличността на софтуер, с който се parse-ва
      сваленият файл съдържащ информация за всички участници в текущото състезание.
      Ако такъв софтуер е наличен се взима списък с имената на всички участници и
      с помощтта на wget се изтеглят лог файловете за всеки един от участниците.
      Източник: https://stackoverflow.com/questions/41001475/extract-part-of-the-code-and-parse-html-in-bash

    - дефинирам функция download_competitor_log, кято служи за изтегляне на лог
      файл на даден участник.
    - извиквам изписаните по-горе функции за да удовлетворя условието на задачата

2. Описание на конструкцията по решението на задача 2 поместена в 61701-competition.sh
    - дефинирам променливи, в които ще съхраняам информацията въведена от потребителя
    - дефинирам функция read_input, която прочита подадената от потребителя информация и
      я съхранява в описаните по-горе променливи. Заедно с това се валидира дали такива
      аргументи са подадени и дали са валидни
    - дефинирам отделни функции за всяка подточка от задачата
    - извиквам описаните по-горе функции за да удовлетворя условието на задачата

2а. Описание на решението на задача 2а поместена в 61701-competition.sh
    - дефинирам функция participants, която обхожда всички файлове поместени в
      подадената директория и изписва имената им, като по този начин отпечатвам списък
      с имената на всички участници
    - тъй като използвам тази функция и от другите подточки, тя приема параметър,
      които контролира това дали да се отпечатят имената на участниците или
      само да бъдат добавени във вътрешен масив
      Източник: https://stackoverflow.com/questions/1951506/add-a-new-element-to-an-array-without-specifying-the-index-in-bash

2б. Описание на решението на задача 2б поместена в 61701-competition.sh
    - дефинирам функция outliers, която взима всички участници и дефинирам масив, в
      който да съхранявам намерените outliers.
    - обхождам логовете на всички участници и ги чета ред по ред, като проверявам
      дали получателят на всеки отчет е позивната на реален участник. Ако това не е така,
      то добавям съоветните позивни в списъка с outliers
      Източник: https://stackoverflow.com/questions/13219634/easiest-way-to-check-for-an-index-or-a-key-in-an-array
    - след като обходя всички файлове на участниците отпечатвам списъка с outliers

2в. Описание на решението на задача 2в поместена в 61701-competition.sh
    - дефинирам функция unique, която изписва позивните на участници,
      които се срещат в 3 или по-малко отчета
    - взимам всички участници и дефинирам масив, в който пазя колко пъти се срещат
      обръщения към всеки от участниците
    - обхожам логовете на всички участници и ги чета ред по ред, като отброявам
      колко пъти се среща всяка от позивните на участниците
    - обхождам масива, които пази броят на срещанията на позивните на всеки от участниците
      и отпечатвам тези с 3 или по-малко срещания

2г. Описание на решението на задача 2г поместена в 61701-competition.sh
    - дефинирам функция cross_check, която проверява за кои отчети не съществува запис
      в отсрещния отчет
    - взимам всички участници и ги обхождам един по един
    - за всеки участник, чета лога ред по ред и за всеки отчет прочитам лога на получателя
    - чета лога на получателя и сравнявам дали се съдържа отчет изпратен на
      същата дата и час с получател оригиналният изпращач
    - отпечатвам текущия отчет, ако не е открит запис отговарящ на описаните по-горе условия